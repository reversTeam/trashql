<?php
/**
 * This class was automatically generated by GraphQL Schema generator
 */

namespace AppBundle\GraphQL;

use AppBundle\GraphQL\Schemas\OfferType;
use AppBundle\GraphQL\Schemas\ProductType;
use Youshido\GraphQL\Config\Schema\SchemaConfig;
use Youshido\GraphQL\Field\InputField;
use Youshido\GraphQl\Relay\Connection\ArrayConnection;
use Youshido\GraphQL\Relay\Connection\Connection;
use Youshido\GraphQL\Relay\Fetcher\CallableFetcher;
use Youshido\GraphQL\Relay\Field\NodeField;
use Youshido\GraphQL\Relay\RelayMutation;
use Youshido\GraphQL\Schema\AbstractSchema;
use Youshido\GraphQL\Type\ListType\ListType;
use Youshido\GraphQL\Type\NonNullType;
use Youshido\GraphQL\Type\Scalar\IntType;
use Youshido\GraphQL\Type\Scalar\StringType;
use AppBundle\GraphQL\Schemas\FactionType;
use AppBundle\GraphQL\Schemas\ShipType;
use AppBundle\GraphQL\Schemas\TestDataProvider;

class Schema extends AbstractSchema
{
    public function build(SchemaConfig $config)
    {
        $fetcher = new CallableFetcher(
            function ($type, $id) {
                switch ($type) {
                    case FactionType::TYPE_KEY:
                        return TestDataProvider::getFaction($id);
                    case
                    ShipType::TYPE_KEY:
                        return TestDataProvider::getShip($id);
                }
                return null;
            },
            function ($object) {
                return $object && array_key_exists('ships', $object) ? new FactionType() : new ShipType();
            }
        );

        $config->getQuery()
            ->addField(new NodeField($fetcher))
            ->addField('rebels', [
                'type'    => new FactionType(),
                'resolve' => function () {
                    return TestDataProvider::getFaction('rebels');
                }
            ])
            ->addField('empire', [
                'type'    => new FactionType(),
                'resolve' => function () {
                    return TestDataProvider::getFaction('empire');
                }
            ])
            ->addField('factions', [
                'type'    => new ListType(new FactionType()),
                'args'    => [
                    'names' => [
                        'type' => new ListType(new StringType())
                    ]
                ],
                'resolve' => function ($value = null, $args, $info) {
                    return TestDataProvider::getByNames($args['names']);
                }
            ])
            ->addField('product', [
                'type'    => new ProductType(),
                'args'    => [
                    'id' => [
                        'type' => new IntType()
                    ]
                ],
                'resolve' => function ($value = null, $args, $info) {
                    $product = new ProductType();
                    return $product->getProduct($value, $args, $info);
                }
            ])
            ->addField('offer', [
                'type'    => new OfferType(),
                'args'    => [
                    'id' => [
                        'type' => new IntType()
                    ]
                ],
                'resolve' => function ($value = null, $args, $info) {
                    $product = new OfferType();
                    return $product->getOffer($value, $args, $info);
                }
            ])
            ->addField('products', [
                'type'    => new ProductType(),
                'resolve' => function () {
                    $product = new ProductType();
                    return $product->getProduct();
                }
            ]);
    }

}
